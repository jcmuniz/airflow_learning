affinity: {}
airflowConfigAnnotations: {}
airflowHome: /opt/airflow
airflowLocalSettings: >-
  {{- if semverCompare ">=2.2.0" .Values.airflowVersion }}

  {{- if not (or .Values.webserverSecretKey
  .Values.webserverSecretKeySecretName) }}

  from airflow.www.utils import UIAlert


  DASHBOARD_UIALERTS = [
    UIAlert(
      'Usage of a dynamic webserver secret key detected. We recommend a static webserver secret key instead.'
      ' See the <a href='
      '"https://airflow.apache.org/docs/helm-chart/stable/production-guide.html#webserver-secret-key">'
      'Helm Chart Production Guide</a> for more details.',
      category="warning",
      roles=["Admin"],
      html=True,
    )
  ]

  {{- end }}

  {{- end }}
airflowPodAnnotations: {}
airflowVersion: 2.1.4
allowPodLaunching: true
cleanup:
  affinity: {}
  args:
    - bash
    - '-c'
    - exec airflow kubernetes cleanup-pods --namespace={{ .Release.Namespace }}
  command: null
  enabled: true
  nodeSelector: {}
  schedule: '0 * * * *'
  serviceAccount:
    annotations: {}
    create: true
    name: null
  tolerations: []
config:
  api:
    auth_backend: airflow.api.auth.backend.deny_all
  celery:
    worker_concurrency: 16
  celery_kubernetes_executor:
    kubernetes_queue: kubernetes
  core:
    colored_console_log: 'False'
    dags_folder: '{{ include "airflow_dags" . }}'
    executor: '{{ .Values.executor }}'
    load_examples: 'False'
    remote_logging: '{{- ternary "True" "False" .Values.elasticsearch.enabled }}'
  elasticsearch:
    json_format: 'True'
    log_id_template: '{dag_id}_{task_id}_{execution_date}_{try_number}'
  elasticsearch_configs:
    max_retries: 3
    retry_timeout: 'True'
    timeout: 30
  kerberos:
    ccache: >-
      {{ .Values.kerberos.ccacheMountPath }}/{{ .Values.kerberos.ccacheFileName
      }}
    keytab: '{{ .Values.kerberos.keytabPath }}'
    principal: '{{ .Values.kerberos.principal }}'
    reinit_frequency: '{{ .Values.kerberos.reinitFrequency }}'
  kubernetes:
    airflow_configmap: '{{ include "airflow_config" . }}'
    airflow_local_settings_configmap: '{{ include "airflow_config" . }}'
    multi_namespace_mode: '{{ if .Values.multiNamespaceMode }}True{{ else }}False{{ end }}'
    namespace: '{{ .Release.Namespace }}'
    pod_template_file: '{{ include "airflow_pod_template_file" . }}/pod_template_file.yaml'
    worker_container_repository: >-
      {{ .Values.images.airflow.repository | default
      .Values.defaultAirflowRepository }}
    worker_container_tag: '{{ .Values.images.airflow.tag | default .Values.defaultAirflowTag }}'
  logging:
    colored_console_log: 'False'
    remote_logging: '{{- ternary "True" "False" .Values.elasticsearch.enabled }}'
  metrics:
    statsd_host: '{{ printf "%s-statsd" .Release.Name }}'
    statsd_on: '{{ ternary "True" "False" .Values.statsd.enabled }}'
    statsd_port: 9125
    statsd_prefix: airflow
  scheduler:
    run_duration: 41460
    statsd_host: '{{ printf "%s-statsd" .Release.Name }}'
    statsd_on: '{{ ternary "True" "False" .Values.statsd.enabled }}'
    statsd_port: 9125
    statsd_prefix: airflow
  webserver:
    enable_proxy_fix: 'True'
    rbac: 'True'
createUserJob:
  affinity: {}
  annotations: {}
  jobAnnotations: {}
  nodeSelector: {}
  serviceAccount:
    annotations: {}
    create: true
    name: null
  tolerations: []
dags:
  gitSync:
    branch: main
    containerName: git-sync
    depth: 1
    enabled: true
    env: []
    extraVolumeMounts: []
    maxFailures: 0
    repo: https://github.com/jcmuniz/airflow_learning.git
    resources: {}
    rev: HEAD
    subPath: dags
    uid: 65533
    wait: 60
  persistence:
    accessMode: ReadWriteOnce
    enabled: false
    existingClaim: null
    size: 1Gi
    storageClassName: null
data:
  brokerUrl: null
  brokerUrlSecretName: null
  metadataConnection:
    db: airflow
    host: 192.168.1.9
    pass: airflow
    port: 5432
    protocol: postgresql
    sslmode: disable
    user: airflow
  metadataSecretName: null
  resultBackendConnection: null
  resultBackendSecretName: null
defaultAirflowRepository: apache/airflow
defaultAirflowTag: 2.1.4
elasticsearch:
  connection: {}
  enabled: false
  secretName: null
env:
  - name: AIRFLOW__CORE__REMOTE_LOGGING
    value: 'True'
  - name: AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER
    value: 's3://jarvis-cluster-bucket/logs/airflow/'
  - name: AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID
    value: 'my_aws_conn'
  - name: _AIRFLOW_DB_UPGRADE
    value: 'True'
executor: KubernetesExecutor
extraConfigMaps: {}
extraEnv: null
extraEnvFrom: null
extraSecrets: {}
fernetKey: "sMy6c2cD1ZdP5eN30enGU9lLOEldDoBxGn2UTqP5Xvc="
fernetKeySecretName: null
flower:
  affinity: {}
  args:
    - bash
    - '-c'
    - >-
      exec \

      airflow {{ semverCompare ">=2.0.0" .Values.airflowVersion | ternary
      "celery flower" "flower" }}
  command: null
  enabled: false
  extraContainers: []
  extraNetworkPolicies: []
  extraVolumes: []
  networkPolicy:
    ingress:
      from: []
      ports:
        - port: flower-ui
  nodeSelector: {}
  password: null
  resources: {}
  secretName: null
  service:
    annotations: {}
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    ports:
      - name: flower-ui
        port: '{{ .Values.ports.flowerUI }}'
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: null
  tolerations: []
  username: null
fullnameOverride: ''
gid: 0
images:
  airflow:
    pullPolicy: IfNotPresent
    repository: null
    tag: null
  flower:
    pullPolicy: IfNotPresent
    repository: null
    tag: null
  gitSync:
    pullPolicy: IfNotPresent
    repository: k8s.gcr.io/git-sync/git-sync
    tag: v3.3.0
  pgbouncer:
    pullPolicy: IfNotPresent
    repository: apache/airflow
    tag: airflow-pgbouncer-2021.04.28-1.14.0
  pgbouncerExporter:
    pullPolicy: IfNotPresent
    repository: apache/airflow
    tag: airflow-pgbouncer-exporter-2021.09.22-0.12.0
  pod_template:
    pullPolicy: IfNotPresent
    repository: null
    tag: null
  redis:
    pullPolicy: IfNotPresent
    repository: redis
    tag: 6-buster
  statsd:
    pullPolicy: IfNotPresent
    repository: apache/airflow
    tag: airflow-statsd-exporter-2021.04.28-v0.17.0
  useDefaultImageForMigration: false
ingress:
  enabled: false
  flower:
    annotations: {}
    host: ''
    hosts: []
    ingressClassName: ''
    path: /
    pathType: ImplementationSpecific
    tls:
      enabled: false
      secretName: ''
  web:
    annotations: {}
    host: ''
    hosts: []
    ingressClassName: ''
    path: /
    pathType: ImplementationSpecific
    precedingPaths: []
    succeedingPaths: []
    tls:
      enabled: false
      secretName: ''
kerberos:
  ccacheFileName: cache
  ccacheMountPath: /var/kerberos-ccache
  config: >
    # This is an example config showing how you can use templating and how
    "example" config

    # might look like. It works with the test kerberos server that we are using
    during integration

    # testing at Apache Airflow (see
    `scripts/ci/docker-compose/integration-kerberos.yml` but in

    # order to make it production-ready you must replace it with your own
    configuration that

    # Matches your kerberos deployment. Administrators of your Kerberos instance
    should

    # provide the right configuration.


    [logging]

    default = "FILE:{{ template "airflow_logs_no_quote" . }}/kerberos_libs.log"

    kdc = "FILE:{{ template "airflow_logs_no_quote" . }}/kerberos_kdc.log"

    admin_server = "FILE:{{ template "airflow_logs_no_quote" . }}/kadmind.log"


    [libdefaults]

    default_realm = FOO.COM

    ticket_lifetime = 10h

    renew_lifetime = 7d

    forwardable = true


    [realms]

    FOO.COM = {
      kdc = kdc-server.foo.com
      admin_server = admin_server.foo.com
    }
  configPath: /etc/krb5.conf
  enabled: false
  keytabPath: /etc/airflow.keytab
  principal: airflow@FOO.COM
  reinitFrequency: 3600
kubeVersionOverride: ''
labels: {}
limits: []
logs:
  persistence:
    enabled: false
    existingClaim: null
    size: 100Gi
    storageClassName: null
migrateDatabaseJob:
  affinity: {}
  annotations: {}
  extraContainers: []
  jobAnnotations: {}
  nodeSelector: {}
  serviceAccount:
    annotations: {}
    create: true
    name: null
  tolerations: []
multiNamespaceMode: false
nameOverride: ''
networkPolicies:
  enabled: false
nodeSelector: {}
pgbouncer:
  affinity: {}
  ciphers: normal
  configSecretName: null
  enabled: false
  extraIni: null
  extraIniMetadata: null
  extraIniResultBackend: null
  extraNetworkPolicies: []
  logConnections: 0
  logDisconnections: 0
  maxClientConn: 100
  metadataPoolSize: 10
  metricsExporterSidecar:
    resources: {}
  nodeSelector: {}
  podDisruptionBudget:
    config:
      maxUnavailable: 1
    enabled: false
  resources: {}
  resultBackendPoolSize: 5
  service:
    extraAnnotations: {}
  serviceAccount:
    annotations: {}
    create: true
    name: null
  ssl:
    ca: null
    cert: null
    key: null
  sslmode: prefer
  tolerations: []
  uid: 65534
  verbose: 0
podTemplate: null
ports:
  airflowUI: 8080
  flowerUI: 5555
  pgbouncer: 6543
  pgbouncerScrape: 9127
  redisDB: 6379
  statsdIngest: 9125
  statsdScrape: 9102
  workerLogs: 8793
postgresql:
  enabled: false
  postgresqlPassword: postgres
  postgresqlUsername: postgres
quotas: {}
rbac:
  create: true
redis:
  affinity: {}
  enabled: false
  nodeSelector: {}
  password: null
  passwordSecretName: null
  persistence:
    enabled: true
    size: 1Gi
    storageClassName: null
  resources: {}
  safeToEvict: true
  serviceAccount:
    annotations: {}
    create: true
    name: null
  terminationGracePeriodSeconds: 600
  tolerations: []
registry:
  connection: {}
  secretName: null
scheduler:
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                component: scheduler
            topologyKey: kubernetes.io/hostname
          weight: 100
  args:
    - bash
    - '-c'
    - exec airflow scheduler
  command: null
  extraContainers: []
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  livenessProbe:
    failureThreshold: 10
    initialDelaySeconds: 10
    periodSeconds: 30
    timeoutSeconds: 5
  logGroomerSidecar:
    args:
      - bash
      - /clean-logs
    command: null
    enabled: true
    resources: {}
    retentionDays: 15
  nodeSelector: {}
  podDisruptionBudget:
    config:
      maxUnavailable: 1
    enabled: false
  replicas: 1
  resources: {}
  safeToEvict: true
  serviceAccount:
    annotations: {}
    create: true
    name: null
  strategy: null
  tolerations: []
  updateStrategy: null
secret: []
statsd:
  affinity: {}
  enabled: true
  extraMappings: []
  extraNetworkPolicies: []
  nodeSelector: {}
  resources: {}
  service:
    extraAnnotations: {}
  serviceAccount:
    annotations: {}
    create: true
    name: null
  tolerations: []
  uid: 65534
tolerations: []
triggerer:
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                component: triggerer
            topologyKey: kubernetes.io/hostname
          weight: 100
  args:
    - bash
    - '-c'
    - exec airflow triggerer
  command: null
  extraContainers: []
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  livenessProbe:
    failureThreshold: 10
    initialDelaySeconds: 10
    periodSeconds: 30
    timeoutSeconds: 5
  nodeSelector: {}
  replicas: 1
  resources: {}
  safeToEvict: true
  serviceAccount:
    annotations: {}
    create: true
    name: null
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 50%
  terminationGracePeriodSeconds: 60
  tolerations: []
uid: 50000
webserver:
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                component: webserver
            topologyKey: kubernetes.io/hostname
          weight: 100
  allowPodLogReading: true
  args:
    - bash
    - '-c'
    - exec airflow webserver
  command: null
  defaultUser:
    email: juliano.muniz@outlook.com
    enabled: true
    firstName: Juliano
    lastName: Muniz
    password: admin
    role: Admin
    username: jmuniz
  extraContainers: []
  extraInitContainers: []
  extraNetworkPolicies: []
  extraVolumeMounts: []
  extraVolumes: []
  livenessProbe:
    failureThreshold: 20
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 30
  networkPolicy:
    ingress:
      from: []
      ports:
        - port: airflow-ui
  nodeSelector: {}
  readinessProbe:
    failureThreshold: 20
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 30
  replicas: 1
  resources: {}
  service:
    annotations: {}
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    ports:
      - name: airflow-ui
        port: '{{ .Values.ports.airflowUI }}'
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: null
  strategy: null
  tolerations: []
  webserverConfig: null
webserverSecretKey: "a763ca841129908a5c98a557f55d504b"
webserverSecretKeySecretName: null
workers:
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                component: worker
            topologyKey: kubernetes.io/hostname
          weight: 100
  args:
    - bash
    - '-c'
    - >-
      exec \
      airflow {{ semverCompare ">=2.0.0" .Values.airflowVersion | ternary "celery worker" "worker" }}
  command: null
  extraContainers: []
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  keda:
    cooldownPeriod: 30
    enabled: false
    maxReplicaCount: 10
    minReplicaCount: 0
    namespaceLabels: {}
    pollingInterval: 5
  kerberosSidecar:
    enabled: false
    resources: {}
  logGroomerSidecar:
    args:
      - bash
      - /clean-logs
    command: null
    resources: {}
    retentionDays: 15
  nodeSelector: {}
  persistence:
    enabled: true
    fixPermissions: false
    size: 5Gi
    storageClassName: null
  replicas: 1
  resources: {}
  safeToEvict: true
  serviceAccount:
    annotations: {}
    create: true
    name: null
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 50%
  terminationGracePeriodSeconds: 600
  tolerations: []
  updateStrategy: null

